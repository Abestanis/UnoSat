/** 
 * Types that represent physical units.
 */
// *** AUTOGENERATED FILE - Do not edit manually! - Changes will be overwritten! *** //

#pragma once

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif


/**
 * Helper macro which allows to select between two macros depending on the presence of an argument.
 */
#define SELECT_UNIT_MACRO_(ignored1, value, NAME, ...) (NAME(value))

/**
 * Helper macro which allows to select between the constructor for an unit, or the unit type itself
 * depending on the existence of an optional argument.
 *
 * @note This allows C code to treat units as if they were C++ classes with an explicit constructor.
 * @param type The unit that will be returned, if no argument was specified.
 * @param constructor The constructor that will be returned, if an argument was specified.
 * @param ... The optional argument, will be passed to the constructor if given.
 */
#define ADD_UNIT_CONSTRUCTOR(type, constructor, ...) \
    SELECT_UNIT_MACRO_(ignored1, ##__VA_ARGS__, constructor, type)

/**
 * Define a new unit type.
 * These types provide a compile-time unit safety.
 *
 * @param type The datatype that is used to represent the unit.
 * @param unit The name of the unit.
 */
#define UNIT_TYPE(type, unit) \
    typedef struct {          \
        type unit;            \
    } unit##_t

/**
 * Define a variant of an unit type.
 * These types represents the same unit, but has a different underlying data type.
 *
 * @param type The datatype that is used to represent this variant.
 * @param unit The name of the base unit.
 * @param variant The appendix to the name that signifies this variant
 */
#define UNIT_VARIANT_TYPE(type, unit, variant) \
    typedef struct {                           \
        type unit;                             \
    } unit##variant##_t

/**
 * A distance in milli meter.
 */
UNIT_TYPE(int32_t, mm);
#define mm_t_CONSTRUCTOR(value) ((mm_t) {value})
#define mm_t(...) ADD_UNIT_CONSTRUCTOR(mm_t, mm_t_CONSTRUCTOR, __VA_ARGS__)

/**
 * An angle in degrees.
 */
UNIT_TYPE(float, deg);
#define deg_t_CONSTRUCTOR(value) ((deg_t) {value})
#define deg_t(...) ADD_UNIT_CONSTRUCTOR(deg_t, deg_t_CONSTRUCTOR, __VA_ARGS__)



#ifdef __cplusplus
}
#endif
