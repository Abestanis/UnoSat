/** 
 * Types that represent physical units.
 */
// *** AUTOGENERATED FILE - Do not edit manually! - Changes will be overwritten! *** //

#pragma once

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif


/**
 * Helper macro which allows to select between two macros depending on the presence of an argument.
 */
#define SELECT_UNIT_MACRO_(ignored1, value, NAME, ...) (NAME(value))

/**
 * Helper macro which allows to select between the constructor for an unit, or the unit type itself
 * depending on the existence of an optional argument.
 *
 * @note This allows C code to treat units as if they were C++ classes with an explicit constructor.
 * @param type The unit that will be returned, if no argument was specified.
 * @param constructor The constructor that will be returned, if an argument was specified.
 * @param ... The optional argument, will be passed to the constructor if given.
 */
#define ADD_UNIT_CONSTRUCTOR(type, constructor, ...) \
    SELECT_UNIT_MACRO_(ignored1, ##__VA_ARGS__, constructor, type)

/**
 * Define a new unit type.
 * These types provide a compile-time unit safety.
 *
 * @param type The datatype that is used to represent the unit.
 * @param unit The name of the unit.
 */
#define UNIT_TYPE(type, unit) \
    typedef struct {          \
        type unit;            \
    } unit##_t

/**
 * Define a variant of an unit type.
 * These types represents the same unit, but has a different underlying data type.
 *
 * @param type The datatype that is used to represent this variant.
 * @param unit The name of the base unit.
 * @param variant The appendix to the name that signifies this variant
 */
#define UNIT_VARIANT_TYPE(type, unit, variant) \
    typedef struct {                           \
        type unit;                             \
    } unit##variant##_t

/**
 * A time in milliseconds.
 */
UNIT_TYPE(uint32_t, ms);
#define ms_t_CONSTRUCTOR(value) ((ms_t) {value})
#define ms_t(...) ADD_UNIT_CONSTRUCTOR(ms_t, ms_t_CONSTRUCTOR, __VA_ARGS__)

/**
 * A distance in milli meter.
 */
UNIT_TYPE(int32_t, mm);
#define mm_t_CONSTRUCTOR(value) ((mm_t) {value})
#define mm_t(...) ADD_UNIT_CONSTRUCTOR(mm_t, mm_t_CONSTRUCTOR, __VA_ARGS__)

/**
 * An angle in degrees.
 */
UNIT_TYPE(float, deg);
#define deg_t_CONSTRUCTOR(value) ((deg_t) {value})
#define deg_t(...) ADD_UNIT_CONSTRUCTOR(deg_t, deg_t_CONSTRUCTOR, __VA_ARGS__)

/**
 * A temperature in degrees celsius.
 */
UNIT_TYPE(float, celsius);
#define celsius_t_CONSTRUCTOR(value) ((celsius_t) {value})
#define celsius_t(...) ADD_UNIT_CONSTRUCTOR(celsius_t, celsius_t_CONSTRUCTOR, __VA_ARGS__)

/**
 * A barometric pressure in Pascal.
 */
UNIT_TYPE(uint32_t, pascal);
#define pascal_t_CONSTRUCTOR(value) ((pascal_t) {value})
#define pascal_t(...) ADD_UNIT_CONSTRUCTOR(pascal_t, pascal_t_CONSTRUCTOR, __VA_ARGS__)

/**
 * A value between 0 and 100.
 */
UNIT_TYPE(float, percent);
#define percent_t_CONSTRUCTOR(value) ((percent_t) {value})
#define percent_t(...) ADD_UNIT_CONSTRUCTOR(percent_t, percent_t_CONSTRUCTOR, __VA_ARGS__)



#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
#define OPERATOR_DECLARATION(unit)                              \
    unit ## _t operator+(unit ## _t left, unit ## _t right);    \
    unit ## _t operator-(unit ## _t left, unit ## _t right);    \
    unit ## _t operator-(unit ## _t left);                      \
    bool operator<(unit ## _t left, unit ## _t right);          \
    bool operator<=(unit ## _t left, unit ## _t right);         \
    bool operator>(unit ## _t left, unit ## _t right);          \
    bool operator>=(unit ## _t left, unit ## _t right);         \
    bool operator==(unit ## _t left, unit ## _t right);         \
    bool operator!=(unit ## _t left, unit ## _t right);         \
    unit ## _t operator "" _ ## unit(unsigned long long value); \


OPERATOR_DECLARATION(ms)
OPERATOR_DECLARATION(mm)
OPERATOR_DECLARATION(deg)
OPERATOR_DECLARATION(celsius)
OPERATOR_DECLARATION(pascal)
OPERATOR_DECLARATION(percent)

#endif /* __cplusplus */
